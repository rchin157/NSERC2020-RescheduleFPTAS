Exact implementation of the algorithm as proposed in the rescheduling paper. Note: Although a few file names include "DP", the implementation ended up not being
dynamic programming. However, implementation of the FPTAS seems to lend itself to an actual DP table.

Running with -m makes it so the program will ask for s_i values.

The jobs are to be supplied via txt file formatted as follows:
***
number of jobs
p_j e_j
.
.
.
p_j e_j
***

Each row is a job and will be internally numbered in order from 1 to n. A sample file containing the jobs outlined in the example is included.
There is an example testcase named mTypeInstance.

-----------------

Running without any arguments is the same as with -m except instead of asking for s_i values it will enumerate all valid combinations of s.
There is an example testcase named eTypeInstance.
The jobs are to be supplied via txt file formatted as above.

-----------------

Running with -g will automatically generate all parameters and enumerate all valid combinations of s.

###

The project now includes an instance generator under the numericaltesting folder. Running the program located there will generate a variety of instances.
A testing script is also included in the main folder which can be run as follows:

./runtest.sh ./numericaltesting/instances/... 

where ... should be replaced with a specific instance file. Of course these files only exist after running the generator, however a new set can be generated by 
running it again as it will simple write over the old ones.

###

(Note: this option is essentially obsolete with version 3 as it provides inferior performance)
Running with -n is identical to running with no arguments and will accept the same files. However no backtracking is performed, an upwards of 20% memory savings.
